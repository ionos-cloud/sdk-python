# coding: utf-8

"""
    CLOUD API

    An enterprise-grade Infrastructure is provided as a Service (IaaS) solution that can be managed through a browser-based \"Data Center Designer\" (DCD) tool or via an easy to use API.   The API allows you to perform a variety of management tasks such as spinning up additional servers, adding volumes, adjusting networking, and so forth. It is designed to allow users to leverage the same power and flexibility found within the DCD visual tool. Both tools are consistent with their concepts and lend well to making the experience smooth and intuitive.  # noqa: E501

    The version of the OpenAPI document: 5.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ionoscloud.configuration import Configuration


class ContractProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {

        'contract_number': 'int',

        'owner': 'str',

        'status': 'str',

        'reg_domain': 'str',

        'resource_limits': 'ResourceLimits',
    }

    attribute_map = {

        'contract_number': 'contractNumber',

        'owner': 'owner',

        'status': 'status',

        'reg_domain': 'regDomain',

        'resource_limits': 'resourceLimits',
    }

    def __init__(self, contract_number=None, owner=None, status=None, reg_domain=None, resource_limits=None, local_vars_configuration=None):  # noqa: E501
        """ContractProperties - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._contract_number = None
        self._owner = None
        self._status = None
        self._reg_domain = None
        self._resource_limits = None
        self.discriminator = None

        if contract_number is not None:
            self.contract_number = contract_number
        if owner is not None:
            self.owner = owner
        if status is not None:
            self.status = status
        if reg_domain is not None:
            self.reg_domain = reg_domain
        if resource_limits is not None:
            self.resource_limits = resource_limits


    @property
    def contract_number(self):
        """Gets the contract_number of this ContractProperties.  # noqa: E501

        contract number  # noqa: E501

        :return: The contract_number of this ContractProperties.  # noqa: E501
        :rtype: int
        """
        return self._contract_number

    @contract_number.setter
    def contract_number(self, contract_number):
        """Sets the contract_number of this ContractProperties.

        contract number  # noqa: E501

        :param contract_number: The contract_number of this ContractProperties.  # noqa: E501
        :type contract_number: int
        """

        self._contract_number = contract_number

    @property
    def owner(self):
        """Gets the owner of this ContractProperties.  # noqa: E501

        owner of the contract  # noqa: E501

        :return: The owner of this ContractProperties.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this ContractProperties.

        owner of the contract  # noqa: E501

        :param owner: The owner of this ContractProperties.  # noqa: E501
        :type owner: str
        """

        self._owner = owner

    @property
    def status(self):
        """Gets the status of this ContractProperties.  # noqa: E501

        status of the contract  # noqa: E501

        :return: The status of this ContractProperties.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ContractProperties.

        status of the contract  # noqa: E501

        :param status: The status of this ContractProperties.  # noqa: E501
        :type status: str
        """

        self._status = status

    @property
    def reg_domain(self):
        """Gets the reg_domain of this ContractProperties.  # noqa: E501

        Registration domain of the contract  # noqa: E501

        :return: The reg_domain of this ContractProperties.  # noqa: E501
        :rtype: str
        """
        return self._reg_domain

    @reg_domain.setter
    def reg_domain(self, reg_domain):
        """Sets the reg_domain of this ContractProperties.

        Registration domain of the contract  # noqa: E501

        :param reg_domain: The reg_domain of this ContractProperties.  # noqa: E501
        :type reg_domain: str
        """

        self._reg_domain = reg_domain

    @property
    def resource_limits(self):
        """Gets the resource_limits of this ContractProperties.  # noqa: E501


        :return: The resource_limits of this ContractProperties.  # noqa: E501
        :rtype: ResourceLimits
        """
        return self._resource_limits

    @resource_limits.setter
    def resource_limits(self, resource_limits):
        """Sets the resource_limits of this ContractProperties.


        :param resource_limits: The resource_limits of this ContractProperties.  # noqa: E501
        :type resource_limits: ResourceLimits
        """

        self._resource_limits = resource_limits
    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContractProperties):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ContractProperties):
            return True

        return self.to_dict() != other.to_dict()
