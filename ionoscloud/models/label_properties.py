# coding: utf-8

"""
    CLOUD API

    An enterprise-grade Infrastructure is provided as a Service (IaaS) solution that can be managed through a browser-based \"Data Center Designer\" (DCD) tool or via an easy to use API.   The API allows you to perform a variety of management tasks such as spinning up additional servers, adding volumes, adjusting networking, and so forth. It is designed to allow users to leverage the same power and flexibility found within the DCD visual tool. Both tools are consistent with their concepts and lend well to making the experience smooth and intuitive.  # noqa: E501

    The version of the OpenAPI document: 5.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ionoscloud.configuration import Configuration


class LabelProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {

        'key': 'str',

        'value': 'str',

        'resource_id': 'str',

        'resource_type': 'str',

        'resource_href': 'str',
    }

    attribute_map = {

        'key': 'key',

        'value': 'value',

        'resource_id': 'resourceId',

        'resource_type': 'resourceType',

        'resource_href': 'resourceHref',
    }

    def __init__(self, key=None, value=None, resource_id=None, resource_type=None, resource_href=None, local_vars_configuration=None):  # noqa: E501
        """LabelProperties - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._key = None
        self._value = None
        self._resource_id = None
        self._resource_type = None
        self._resource_href = None
        self.discriminator = None

        if key is not None:
            self.key = key
        if value is not None:
            self.value = value
        if resource_id is not None:
            self.resource_id = resource_id
        if resource_type is not None:
            self.resource_type = resource_type
        if resource_href is not None:
            self.resource_href = resource_href


    @property
    def key(self):
        """Gets the key of this LabelProperties.  # noqa: E501

        A Label Key  # noqa: E501

        :return: The key of this LabelProperties.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this LabelProperties.

        A Label Key  # noqa: E501

        :param key: The key of this LabelProperties.  # noqa: E501
        :type key: str
        """

        self._key = key

    @property
    def value(self):
        """Gets the value of this LabelProperties.  # noqa: E501

        A Label Value  # noqa: E501

        :return: The value of this LabelProperties.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this LabelProperties.

        A Label Value  # noqa: E501

        :param value: The value of this LabelProperties.  # noqa: E501
        :type value: str
        """

        self._value = value

    @property
    def resource_id(self):
        """Gets the resource_id of this LabelProperties.  # noqa: E501

        The id of the resource  # noqa: E501

        :return: The resource_id of this LabelProperties.  # noqa: E501
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this LabelProperties.

        The id of the resource  # noqa: E501

        :param resource_id: The resource_id of this LabelProperties.  # noqa: E501
        :type resource_id: str
        """

        self._resource_id = resource_id

    @property
    def resource_type(self):
        """Gets the resource_type of this LabelProperties.  # noqa: E501

        The type of the resource on which the label is applied.  # noqa: E501

        :return: The resource_type of this LabelProperties.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this LabelProperties.

        The type of the resource on which the label is applied.  # noqa: E501

        :param resource_type: The resource_type of this LabelProperties.  # noqa: E501
        :type resource_type: str
        """

        self._resource_type = resource_type

    @property
    def resource_href(self):
        """Gets the resource_href of this LabelProperties.  # noqa: E501

        URL to the Resource (absolute path) on which the label is applied.  # noqa: E501

        :return: The resource_href of this LabelProperties.  # noqa: E501
        :rtype: str
        """
        return self._resource_href

    @resource_href.setter
    def resource_href(self, resource_href):
        """Sets the resource_href of this LabelProperties.

        URL to the Resource (absolute path) on which the label is applied.  # noqa: E501

        :param resource_href: The resource_href of this LabelProperties.  # noqa: E501
        :type resource_href: str
        """

        self._resource_href = resource_href
    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LabelProperties):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LabelProperties):
            return True

        return self.to_dict() != other.to_dict()
