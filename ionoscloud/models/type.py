# coding: utf-8

"""
    CLOUD API

     IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.  # noqa: E501

    The version of the OpenAPI document: 6.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ionoscloud.configuration import Configuration


class Type(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    DATACENTER = "datacenter"
    SERVER = "server"
    VOLUME = "volume"
    NIC = "nic"
    LOADBALANCER = "loadbalancer"
    LOCATION = "location"
    FIREWALL_RULE = "firewall-rule"
    FLOW_LOG = "flow-log"
    IMAGE = "image"
    SNAPSHOT = "snapshot"
    LAN = "lan"
    IPBLOCK = "ipblock"
    PCC = "pcc"
    CONTRACT = "contract"
    USER = "user"
    GROUP = "group"
    COLLECTION = "collection"
    RESOURCE = "resource"
    REQUEST = "request"
    REQUEST_STATUS = "request-status"
    S3KEY = "s3key"
    BACKUPUNIT = "backupunit"
    LABEL = "label"
    K8S = "k8s"
    NODEPOOL = "nodepool"
    TEMPLATE = "template"
    NETWORKLOADBALANCER = "networkloadbalancer"
    FORWARDING_RULE = "forwarding-rule"
    NATGATEWAY = "natgateway"
    NATGATEWAY_RULE = "natgateway-rule"
    NODE = "node"
    APPLICATIONLOADBALANCER = "applicationloadbalancer"
    TARGET_GROUP = "target-group"
    SECURITY_GROUP = "security-group"

    allowable_values = [DATACENTER, SERVER, VOLUME, NIC, LOADBALANCER, LOCATION, FIREWALL_RULE, FLOW_LOG, IMAGE, SNAPSHOT, LAN, IPBLOCK, PCC, CONTRACT, USER, GROUP, COLLECTION, RESOURCE, REQUEST, REQUEST_STATUS, S3KEY, BACKUPUNIT, LABEL, K8S, NODEPOOL, TEMPLATE, NETWORKLOADBALANCER, FORWARDING_RULE, NATGATEWAY, NATGATEWAY_RULE, NODE, APPLICATIONLOADBALANCER, TARGET_GROUP, SECURITY_GROUP]  # noqa: E501

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
    }

    attribute_map = {
    }

    def __init__(self, local_vars_configuration=None):  # noqa: E501
        """Type - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Type):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Type):
            return True

        return self.to_dict() != other.to_dict()
